// InteriorPointMethod.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <iostream>
#include "interior-point-method-all.hpp"
#include "helpers-all.hpp"

void checkNewton()
{
    /*COEFFICIENTS c = { 1, 1, 1, 1, 1, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0 },
        { 1, 1, 1, 1, 1, 1, 1},
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4},
        { 1, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 5.2 },
        { 1, 1, 1, 1, 1, 1, 1, 5.2 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 5.2 },
        { 1, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, -1 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 0 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, -1, 6 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 0, 6 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0, 6 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -exp(10), -exp(10) };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, -1 },
        { 0, -0.33, -0.67, -1, -1, -0.5, -0, -1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 0 },
        { -1, -1, -1, -1, -1, -1, -1, 0, 0 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0 },
        { -1.5, -1.83, -2.17, -2.5, -3, -3.5, -4, 0, 0 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, -0.5, 1, -1, 2.6, -2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, -1 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 0 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, -1, 10 },
        { 0, -0.33, -0.67, -1, -1, -0.5, -0, -1, 1, 10 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 0, 10 },
        { -1, -1, -1, -1, -1, -1, -1, 0, 0, 10 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0, 10 },
        { -1.5, -1.83, -2.17, -2.5, -3, -3.5, -4, 0, 0, 10 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1, 10 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 },
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, -0.5, 1, -1, 2.6, -2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -exp(10), -exp(10) };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, 0, 0 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };*/
    
    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0, 0.33, 0.67, 1, 1, 0.5, 0, 1, 0, 0, 5.2 },
        { 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 5.2 },
        { 1.5, 1.83, 2.17, 2.5, 3, 3.5, 4, 0, 0, 1, 5.2 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.2 },
        { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5.2 },
        { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5.2 },
        { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 5.2 },
        { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5.2 },
        { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5.2 },
        { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5.2 },
        { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5.2 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5.2 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5.2 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.5, 1, 2.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -exp(10), -exp(10) };*/

    /*COEFFICIENTS c = { 1, 2 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 1, 0 },
        { 1, 1 },
        { 1, 0 },
        { 0, 1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 2, 3, 0, 0 };*/

    /*COEFFICIENTS c = { 0, 0, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 1, 0, 10 },
        { 1, 1, 10 },
        { 1, 0, 10 },
        { 0, 1, 10 },
        { 0, 0, 1 },
        { 0, 0, -1 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 2, 3, 0, 0, -exp(10), -exp(10) };*/

    /*COEFFICIENTS c = { 0, 0, 0, 0, 0, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 2.0430214080204556, 2.345831221764775, 1.0527100758497547, 2.292461977216086, 1.3581495164149966, 1, -1 },
        { -2.0430214080204556, -2.345831221764775, 1.0527100758497547, 2.292461977216086, 1.3581495164149966, -1, 1 },
        { 0.9905125781385595, 0.3090132503826537, 1.914917913354935, 1.7331454383736689, 2.414081879805426, 0, 0 },
        { -0.9905125781385595, -0.3090132503826537, -1.914917913354935, -1.7331454383736689, -2.414081879805426, 0, 0 },
        { 1.6117065273322864, 2.946492374734616, 0.1840058633972934, 2.809603309028337, 1.6249982773567648, 0, 0 },
        { -1.6117065273322864, -2.946492374734616, -0.1840058633972934, -2.809603309028337, -1.6249982773567648, 0, 0 },
        { 1, 0, 0, 0, 0, 0, 0 },
        { 0, 1, 0, 0, 0, 0, 0 },
        { 0, 0, 1, 0, 0, 0, 0 },
        { 0, 0, 0, 1, 0, 0, 0 },
        { 0, 0, 0, 0, 1, 0, 0 },
        { 0, 0, 0, 0, 0, 1, 0 },
        { 0, 0, 0, 0, 0, 0, 1 },
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 4.160325201079071, -4.160325201079071, 3.0082689247924552, -3.0082689247924552, 2.300509083592992, -2.300509083592992, 0, 0, 0, 0, 0, 0, 0 };*/

    COEFFICIENTS c = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1 };
    INEQUALITY_CONSTRAINT_ARRAY A = {
        { 0.0, 0.33, 0.67, 1.0, 1.0, 0.5, 0.0, 1.0, -1.0 },
        { 0.0, -0.33, -0.67, -1.0, -1.0, -0.5, -0.0, -1.0, 1.0 },
        { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0 },
        { -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0 },
        { 2.0, 2.33, 2.67, 3.0, 4.0, 4.5, 5.0, 0.0, 0.0 },
        { -2.0, -2.33, -2.67, -3.0, -3.0, -4.5, -5.0, 0.0, 0.0 },
        { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
        { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
        { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
        { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
        { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
        { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
        { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }
    };
    INEQUALITY_CONSTRAINT_VECTOR b = { 0.05, -0.05, 1.0, -1.0, 3.37, -3.37, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    Matrix result;
    for (int i = 0; i < 1; i++)
    {
        result = InteriorPointMethod(IPM(c, A, b), false).calculate(false);
        result.show();
    }
}

int main()
{
    int count = 0;
    IPM ipm;
    VECTOR_DOUBLE m_x;
    VECTOR_DOUBLE summes;

    std::ifstream f("problems_goal_01-16-2023_03-38-09.json");
    json data = json::parse(f);
    for (int i = 0; i < 250; i++)
    {
        ipm = goal_problem(data, i);
        ipm = positive_goal_problem(ipm);
        /*std::cout << "A\n";
        Matrix(ipm.A).show();
        std::cout << "b\n";
        Matrix(ipm.b).show();
        std::cout << "c\n";
        Matrix(ipm.c).show();
        std::cout << "\n";*/
        m_x = InteriorPointMethod(ipm, false).calculate(false);
        summes.resize(0);
        for (int j = 0; j < ipm.b.size() - ipm.c.size(); j++)
        {
            if (ipm.b[j] == 0) break;
            summes.push_back(0);
            for (int k = 0; k < m_x.size(); k++)
            {
                summes[j] += ipm.A[j][k] * m_x[k];
            }
            if (abs(summes[j] - ipm.b[j]) > 0.01)
            {
                count++;
                std::cout << "i " << i << "\n";
                //Matrix(m_x).show();
                for (int k = 0; k <= j; k++)
                {
                    std::cout << summes[k] << " ";
                }
                std::cout << "\n";

                for (int k = 0; k < ipm.b.size() - ipm.c.size(); k++)
                {
                    std::cout << ipm.b[k] << " ";
                }
                std::cout << "\n";
                std::cout << "\n";
                break;
            }
        }
    }

    std::cout << "count " << count << "\n";

    std::cout << "stop";
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
